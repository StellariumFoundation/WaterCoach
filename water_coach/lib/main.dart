import 'package:flutter/material.dart
import 'package:water_coach/water_coach_page.dart';
import 'package:firebase_core/firebase_core.dart'; // Added firebase_core
import 'firebase_options.dart'; // Added firebase_options
  
import 'package:firebase_core/firebase_core.dart';
import 'package:firebase_auth/firebase_auth.dart'; // Added for User type
import 'package:water_coach/services/AuthService.dart';
import 'package:water_coach/screens/auth/LoginScreen.dart';
import 'package:water_coach/screens/HomeScreen.dart';
// Import your firebase_options.dart if you have it from flutterfire configure
// import 'firebase_options.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized(); // Ensured initialization
  await Firebase.initializeApp( // Initialized Firebase
    options: DefaultFirebaseOptions.currentPlatform,
  );
  WidgetsFlutterBinding.ensureInitialized();
  // Make sure to replace DefaultFirebaseOptions.currentPlatform with your actual options
  // if you are not using the firebase_options.dart file generated by FlutterFire.
  // If firebase_options.dart exists and is correctly configured by `flutterfire configure`,
  // this is the typical way:
  // await Firebase.initializeApp(
  //   options: DefaultFirebaseOptions.currentPlatform,
  // );
  // If you don't have firebase_options.dart or it's not working,
  // you might need to initialize manually, though this is less common now.
  await Firebase.initializeApp(); // Simplest form, relies on auto-detection or prior con
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Water Coach',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        visualDensity: VisualDensity.adaptivePlatformDensity,
      ),
      home: AuthWrapper(),
    );
  }
}

class AuthWrapper extends StatelessWidget {
  const AuthWrapper({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    final AuthService authService = AuthService();
    return StreamBuilder<User?>( // Assuming User is from firebase_auth
      stream: authService.authStateChanges,
      builder: (context, snapshot) {
        if (snapshot.connectionState == ConnectionState.active) {
          final User? user = snapshot.data;
          if (user == null) {
            return const LoginScreen();
          }
          return const HomeScreen();
        }
        // Show a loading indicator while checking auth state
        return const Scaffold(
          body: Center(
            child: CircularProgressIndicator(),
          ),
        );
      },
    );
  }
}
